{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/AccountSummary.js","components/Transaction.js","components/TransactionHistory.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","delTransaction","addTransaction","Balance","balance","useContext","map","transactionAmount","reduce","acc","item","toFixed","AccountSummary","transactionAmounts","income","expense","Math","abs","className","Transaction","sign","transactionType","description","onClick","TransactionHistory","key","AddTransaction","useState","setDescription","setTransactionAmount","onSubmit","e","preventDefault","newTransaction","Date","getTime","htmlFor","onChange","target","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d143d6e.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return (\n        <h1>\n            Expense Tracker by ZAIN RAMZAN GORSI\n        </h1>\n    )\n}\n","export default (state, action) => {\n    switch(action.type) {\n        case 'DELETE_TRANSACTION':\n            return {\n                ...state,\n                transactions: state.transactions\n                    .filter(transaction => transaction.id !== action.payload)\n            }\n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n        default:\n            return state;\n    };\n}","import React, { createContext, useReducer } from 'react';\n\n// Import the Reducer\nimport AppReducer from './AppReducer';\n\n// Create the initial state\nconst initialState = {\n    transactions: []\n}\n\n// Create the Global Context\nexport const GlobalContext = createContext(initialState);\n\n// Create a Provider for the Global Context\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions for Transactions\n\n        // Delete Existing Transaction Action\n        function delTransaction(id) {\n            dispatch({\n                type: 'DELETE_TRANSACTION',\n                payload: id\n            });\n        }\n\n        // Add New Transaction Action\n        function addTransaction(transaction) {\n            dispatch({\n                type: 'ADD_TRANSACTION',\n                payload: transaction\n            })\n        }\n\n    return (\n        <GlobalContext.Provider value={\n            {\n                transactions: state.transactions,\n                delTransaction,\n                addTransaction\n            }\n        }>\n            {children}\n        </GlobalContext.Provider>\n    );\n\n}","import React, { useContext } from 'react'\n\n// Import the Global State\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Balance = () => {\n\n    const { transactions } = useContext(GlobalContext);\n\n    const transactionAmounts = transactions.map(transaction => transaction.transactionAmount);\n    const balance = transactionAmounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n    \n\n    return (\n        <div>\n            <h4>Your Balance</h4>\n            <h1 id=\"balance\">${balance}</h1>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\n\n// Import the Global State\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const AccountSummary = () => {\n\n    const { transactions } = useContext(GlobalContext);\n\n    const transactionAmounts = transactions.map(transaction => transaction.transactionAmount);\n\n    const income = transactionAmounts\n        .filter(transaction => transaction > 0)\n        .reduce((acc, transaction) => (acc += transaction), 0)\n        .toFixed(2);\n\n    const expense = Math.abs(transactionAmounts\n        .filter(transaction => transaction < 0)\n        .reduce((acc, transaction) => (acc += transaction), 0)\n        ).toFixed(2);\n\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n                <h4>Income</h4>\n                <p className=\"money plus\">\n                    {income}\n                </p>\n            </div>\n            <div>\n                <h4>Expense</h4> \n                <p className=\"money minus\">\n                    {expense}\n                </p>\n            </div>\n            \n        </div>\n    )\n}\n","import React, { useContext } from 'react'\n\n// Import the Global State\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const Transaction = ({ transaction }) => {\n\n    const { delTransaction } = useContext(GlobalContext);\n\n    const sign = transaction.transactionAmount > 0 ? '+' : '-';\n    const transactionType = transaction.transactionAmount > 0 ? 'plus' : 'minus';\n\n    return (\n        <li className={transactionType}>\n            {transaction.description}\n            <span>{sign}${Math.abs(transaction.transactionAmount)}</span>\n            <button className=\"delete-btn\"\n                    onClick={() => delTransaction(transaction.id)}>\n                X\n            </button>\n        </li>\n    )\n}","import React, { useContext } from 'react';\n\n// Import Transaction Component\nimport { Transaction } from './Transaction';\n\n// Import the Global State\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const TransactionHistory = () => {\n\n    const { transactions } = useContext(GlobalContext);\n\n    return (\n        <div>\n            <h3>\n                Transaction History\n            </h3>\n            <ul className=\"list\">\n                {transactions.map(transaction => \n                    (\n                    <Transaction key={transaction.id} transaction={transaction} />\n                    )\n                )}\n            </ul>\n        </div>\n    )\n}\n","import React, { useState, useContext } from 'react';\n\n// Import the Global State\nimport { GlobalContext } from '../context/GlobalState';\n\n\nexport const AddTransaction = () => {\n\n    const [description, setDescription] = useState('');\n    const [transactionAmount, setTransactionAmount] = useState('');\n\n    const { addTransaction } = useContext(GlobalContext);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        const newTransaction = {\n            id: new Date().getTime(),\n            description,\n            transactionAmount: +transactionAmount\n        }\n\n        addTransaction(newTransaction);\n\n    }\n\n    return ( <\n        div >\n        <\n        h3 > Add New Transaction < /h3> <\n        form onSubmit = { onSubmit } >\n        <\n        div className = \"form-control\" >\n        <\n        label htmlFor = \"description\" >\n        Description <\n        /label> <\n        input type = \"text\"\n        id = \"description\"\n        value = { description }\n        onChange = {\n            (e) => setDescription(e.target.value) }\n        placeholder = \"Enter the Transaction value...\"\n        required = \"required\" /\n        >\n        <\n        /div> <\n        div className = \"form-control\" >\n        <\n        label htmlFor = \"transactionamount\" >\n        Transaction Amount <\n        /label> <\n        input type = \"number\"\n        id = \"transactionamount\"\n        value = { transactionAmount }\n        onChange = {\n            (e) => setTransactionAmount(e.target.value) }\n        placeholder = \"Enter the Amount...\"\n        required = \"required\" /\n        >\n        <\n        /div> <\n        button className = \"btn\" > Add Transaction < /button> <\n        /form> <\n        /div>\n    )\n}","import React from 'react';\n\n// Import CSS\nimport './App.css';\n\n// Import Components\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { AccountSummary } from './components/AccountSummary';\nimport { TransactionHistory } from './components/TransactionHistory';\nimport { AddTransaction } from './components/AddTransaction';\n\n// Import Provider\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n      <GlobalProvider>\n        <Header />\n        <div className=\"container\">\n          <Balance />\n          <AccountSummary />\n          <TransactionHistory />\n          <AddTransaction />\n        </div>\n      </GlobalProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}